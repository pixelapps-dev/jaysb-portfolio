/* Helpers
  =============== */

// Classic clearfix
.clearfix::before,
.clearfix::after {
    content: " ";
    display: block;
}

.clearfix:after {
    clear: both;
}

// Text alignment
.text-left {
    text-align: left;
}

.text-right {
    text-align: right;
}

.text-center {
    text-align: center;
}

.text-justify {
    text-align: justify;
}

// Display
.block {
    display: block;
}

.inline-block {
    display: inline-block;
}

.inline {
    display: inline;
}

// Vertical center
.vertical-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

// Responsive images
.responsive-image {
    max-width: 100%;
    height: auto;
}

// Display State
.show {
    display: block !important;
}

.hide {
    display: none !important;
}

.invisible {
    visibility: hidden;
}

// Floats
.float-left {
    float: left;
}

.float-right {
    float: right;
}

// Padding
.no-padding-top {
    padding-top: 0;
}

.no-padding-bottom {
    padding-bottom: 0;
}

.padding-top {
    padding-top: 2rem;
}

.padding-bottom {
    padding-bottom: 2rem;
}

// Margins
.no-margin-top {
    margin-top: 0;
}

.no-margin-bottom {
    margin-bottom: 0;
}

.margin-top {
    margin-top: 2rem;
}

.margin-bottom {
    margin-bottom: 2rem;
}

// Backgrounds
.alternate-background {
    background: $alternate-background;
    color: $alternate-color;
}

// Screen reader text for accessibility
.screen-reader-text {
    clip: rect(1px, 1px, 1px, 1px);
    position: absolute !important;
    height: 1px;
    width: 1px;
    overflow: hidden;
}

// Uppercase Label

.small-label {
    font-size: .9rem;
    font-weight: 700;
    letter-spacing: 1.25px;
    text-transform: uppercase;
    color: lighten($font-color, 30%);
    margin: $margins 0;
}

// Card
.card {
    background-color: rgb(237, 237, 237);
    box-shadow: 0 5px 15px 0 rgba(112, 112, 112, 0.1);
    padding: $padding;
}

// Padding & Spacing

$sizeUnit: rem;
$marginKey: 'm';
$paddingKey: 'p';
$separator: '-';
$sizes: (
    ('none', 0),
    ('xxs', 0.125),
    ('xs', 0.25),
    ('sm', 0.5),
    ('md', 1),
    ('lg', 2),
    ('xl', 4),
    ('xxl', 8),
);
$positions: (
    ('t', 'top'),
    ('r', 'right'),
    ('b', 'bottom'),
    ('l', 'left')
);

@function sizeValue($key, $value) {
    @return if($key == 'none', 0, $value + $sizeUnit);
}

@each $size in $sizes {
    $sizeKey: nth($size, 1);
    $sizeValue: nth($size, 2);
    .#{$marginKey}#{$separator}#{$sizeKey} {
        margin: sizeValue($sizeKey, $sizeValue);
    }
    .#{$paddingKey}#{$separator}#{$sizeKey} {
        padding: sizeValue($sizeKey, $sizeValue);
    }
    @each $position in $positions {
        $posKey: nth($position, 1);
        $posValue: nth($position, 2);
        .#{$marginKey}#{$separator}#{$posKey}#{$separator}#{$sizeKey} {
            margin-#{$posValue}: sizeValue($sizeKey, $sizeValue);
        }
        .#{$paddingKey}#{$separator}#{$posKey}#{$separator}#{$sizeKey} {
            padding-#{$posValue}: sizeValue($sizeKey, $sizeValue);
        }
    }
}
